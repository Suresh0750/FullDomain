CRUD Method Database:

// # Database
Create :
    use Database;
Read :
    show Databese;

Delete :
    db.dropDatabase();


// # collections

Create : 
    db.createCollectin('collectionName')
Read  :
    show collections;
update :
    db.collectionName.renameCollection('newName');
Delete :
    db.collectionName.drop()


// # Document

Create:
    db.collectionName.insertOne({collection})    // * this for insert one collection
    db.collectionName.insertMany([{}]) // * this.for for insert multiple document

Read :
    db.collectionName.findOne()         //* using for finding one document and it show only 19 document
    db.collectionName.find()            //* using for finding Multiple document

Update :
    db.collection.updateOne({// here codition},{$set:{//here mention the value}})
    db.collection.updateMany({},{$set:{}})
    db.collectionName.findOneAndUpdate({},{$set:{//here mention the value}})

Replace :
    db.collectionName.findOneAndReplace({//here mention the condition},{// here mention the value})  // * it will Replace the entire document particulre object based on that condition

Delete :
    db.collectionName.deleteOne({// here mention condition});
    db.collectionName.deleteMany({// here mention condition})
    db.collectionName.findOneAndDelete({// here mention condition})

// # filed inside the document

Create :
    db.collectionName.updateOne({// here condition},{$set:{}})  // using update query we can create filed
    db.collectionName.updateMany({// here condition},{$set:{}})  // using update query we can create filed

Read :
    db.collectionName.findOne()
    db.collectionName.find()

update : 
    db.collecionName.updateOne({//mention the unique},{$set :{filed : new value}})
    db.collecionName.updateMany({//mention the unique},{$set :{filed : new value}})
    db.collecionName.findOneAndUpdate({//mention the unique},{$set :{filed : new value}})

delete :

    db.collectionName.updateOne({//here condition},{$unset:{filed:value}})
    db.collectionName.updateOne({//here condition},{$unset:{filed:"$field}})  // * we not sure about the value means we can mention the filed with $ symbol
    db.collectionName.updateMany({//here condition},{$unset:{filed:"$field}})   

Rename the filed :

    db.collectionName.updateOne({//condition},{$rename:{'oldName':'New name'}});


// # $expr

    is used to match to filed
    
    db.collectionName.findOne({$expr:{$gte:[$age,"$rollNo"]}})



// **********************CRUD OPERATION FINISHED****************************************


// **************************USE QUERY********************************************


// # to.Array()

    db.collectionName.find().toArray()

// # forEach
    db.collectionName.find().forEach((val)=>{     // *it wil coming one by one document
        print(val)
    })

// # distinct

    db.collectionName.distinct()  // * it use for we want to value only in side of the every document but inside of the bracket we should mention that key it will give the value of array format example : we want age from every document we can use distinct('age') it will give [21,32,13,15]

// # sort 
    ascending order :

        db.collectionName.find().sort('mention the field').forEach((val)=>{
        print(val)
    })

    descending order : 
        db.collectionName.find().sort({field:-1})

// # skip

    db.collectionName.find().sort().skip('mention the home many skip')

// # count

    db.collectionName.find().count()



// # capped collection

    db.createCollection('new name',{capped:true,autonIndexId:true,size:123455,max:100})  //size is mention the size of the document how many bytes, max allow the total number of document


// # find above some value
    db.collectionName({fildName:{$gt:value}})
    db.collectionName({fildName:{$gte:value}})

// # find bellow some value
    db.collectionName({fildName:{$lt:value}})
    db.collectionName({fildName :{$lte:value}})

// # array

    db.collectionName.updateOne({},{$push:{field:value}})
    db.collectionName.updateOne({},{$push:{field:{$each:['val','val','val']}}})
    db.collectionName.updateOne({},{$addToSet:{field:{$each:['val','val']}}})   // * using for array only accepting unique value
    db.collectionName.updateOne({},{$pull:{field:'val'}})
    db.collectionName.updateOne({},{$pull:{field:{$in:['val','val']}}})

// # normal projection

    db.collectionName.find({},{name:1,age:1:fieldName:1})


// using upsert
// #     db.collentionName.updateOne({name:'suresh'},{$set:{age:21},{upsert:true}})



// # $in and $all   used in find
    db.collectionName.find({field:{$in:['value','value']}})  //* if one value is there also we it will work is working like or operator
    db.collectionName.find({field: {$all:['value','value']}})  // * is working like a and operator


// # regex patter for filter the value
    
    db.collectionName.find({fieldName:{$regex:/^letter/}})
    db.collectionName.find({fieldName;{$regex:/^letter/,$options:"i}})  // * options is used for case sencitvie it will check uppercase and lowecase


// #***********************Aggregation***************************


db.collectionName.aggregate([
    {$group:{_id:{name:"$name"}}}
])


// using the group find all some

// * accumlator operator

db.collectionName.aggregate([
    {$group:{_id:"",{sum:{$sum:"$age"}}}}    // find the total of age from all document
])

db.collectionName.aggregate([
    {$group:{_id:"",min:{$min:"$age"}}}  // find min value from this document
])

db.collectionName.aggregate([
    {$group:{_id:"",max:{$max:"$age"}}}
])

db.collectionName.aggregate([
    {$group:{_id:"",avg:{$avg:"$avg"}}}
])

// # match the value 
db.collectionName.aggreaget([
    {$match:{$gte:{age:20}}}
])



// # match use with limit
db.practice.aggregate([
  {$match:{age:{$gte:35}}},
  {$group:{_id:{age:"$age"}}},
  {$limit:2}
])



// # join 2 collection

    using lookup 

// # $unwind  it used for give in seperate document giving the seperate collecionName based on the array . the document will created based on each element for inside of the array.

example : 
    {
    "_id" : ObjectId("456187864hfh5421h510"),
    "name" : "Mikky",
    "age" : 31,
    "phone_no" : 8654793212
    "company" : "javatpoint",
    "skills" : [ 
        "C", 
        "C++",
        "PHP", 
        "Java", 
        ".Net"
    ]
}

output : 
    {
    "_id" : ObjectId("456187864hfh5421h510"),
    "name" : "Mikky",
    "age" : 31,
    "phone_no" : 8654793212
    "company" : "javatpoint",
    "skills" : "c"
}{
    "_id" : ObjectId("456187864hfh5421h510"),
    "name" : "Mikky",
    "age" : 31,
    "phone_no" : 8654793212
    "company" : "javatpoint",
    "skills" : "c++"
}{
    "_id" : ObjectId("456187864hfh5421h510"),
    "name" : "Mikky",
    "age" : 31,
    "phone_no" : 8654793212
    "company" : "javatpoint",
    "skills" : "PHP"
}{
    "_id" : ObjectId("456187864hfh5421h510"),
    "name" : "Mikky",
    "age" : 31,
    "phone_no" : 8654793212
    "company" : "javatpoint",
    "skills" :"Java"
}


// # db.collectionName.aggregate([
    {$project:{
        fileName :1,                    // in project if you mention any field the filed it's fileder
        fildName :1
    }},
    {$unwind: "$fildName" // but should be array}  
])


// * example
    db.practice.aggregate([
        {
                    $match:{name:{$regex:/^M/,$options:"i"}},
        
            }, {$group:{_id:"",sum:{$sum:"$age"}}}
        ])

