
// # why we use bson in mongodb

    This binary format is more efficient for both storage and traversal, making operations faster.
    esay to encoding and decoding and read and write

    Index Efficiency: BSON allows for efficient indexing and quick retrieval of documents. The binary format allows MongoDB to traverse indexes quickly, speeding up query performance.

// capped true
  
    // capped we use for  set the size of the collection and collection has some size for example that collection only we can set 10 document we can't add document if the capped is true
   // means we can add a document but the frent of the document will be delete because the collection have some particular size.

    db.createCollection("collectionName",{capped:true,size:56112,max:100,autoIndexId:true})

        // * here size is mention the size in bit format and max is denoted how many document should be allow and autoIndexId is true means we can't add _id manually it's created automatically, but using false we can add manually _id and if we not add manually id created automatically.
        // we can use 16 MB
// # aggregation 

    aggregation is a freamwork, is used to write complex query in easy way.

// # transation 

    transation provide a way to execute multiple operations as a single atomic unit of work.

// # single purpose application

    single purpose application is efficient way to access the accross the document .

    example : count , distinct, group


// # indexing
 
    An index in MongoDB is a data structure that improves the speed of data retrieval operations on a collection by providing a quick access path to the data based on the indexed fields. 

db.collection.createIndex({fileName: 1})

// # impact on indexing
    increased storage Sapce
    impact on write performance


// # gridfs how it works

    GridFS is a specification used in MongoDB for storing and retrieving large files such as images, videos, audio files, and other binary data. It's particularly useful when the size of these files exceeds MongoDB's BSON document size limit (currently 16 MB). Here's how GridFS works and its key components:

// # journaling 

    journaling in mongodb is critical feature that ensure data durability and reliability in the face of system failure. is keep the copy of eveything.   
    (or)
    Using Journaling is like using a log, the reason being, it creates a write operation log to increase the durability. Journaling is temporary storage, which means it keeps only write operation log as pending in journal directory. Also, the shared view has the data but journal directory has the operations.

// # sharding in mongodb

    Sharding in MongoDB is a powerful mechanism for achieving horizontal scalability and managing large datasets. By distributing data across multiple shards based on a shard key, MongoDB can handle massive amounts of data and high query loads effectively, making it suitable for applications requiring robust scalability and performance. However, setting up and managing a sharded cluster requires careful planning and ongoing maintenance to ensure optimal performance and reliability.

// # harizontal scaling 
    // * for undersdating 
    it will create multiple cpu AND STORE data using shard key.

// # vertical scalling
    it is treaditional scalling. it will store the data vertically.

// # horizontal scaling and vertical scaling

    Horizontal scaling involves adding additional servers and partitioning the system dataset and load over those servers. Vertical scaling involves expanding the resources used by a single server/replica set.

// # replication 
    In simple terms, MongoDB replication is the process of creating a copy of the same data set in more than one MongoDB server. 

// # relational vs non relational 
    relational database is every data store inside of the table . non relational database store the data in side document or graph , 
    reational database table with row and column based , non relational database store key and value paire.
    relational database used ACID property AND non  relational used cap theoram. 

// # sql vs nosql

    sql is relational database nosql is non relational database.
    sql vertical scalability and nosql horizontal scalability
    sql store the data row and collumn and nosql key value pair
    sql is using ACID property and nosql is CAP theoram.

// # upsert true 

    using upsert true if the value is not also the document will create.

    db.collentionName.updateOne({name:'suresh'},{$set:{age:21},{upsert:true}})

// # cap theoram 

    consitstancy
    availability
    porticial tolarance

    consitstancy
        if the data is there menas it will come if it not there means give error don't give the unreasonable data.
        The data should consitstancy in every node and any of the time. 
    Availability 
        if the node is issue the the data will available on another node or server.
    partition Tolarance
        mongodb handles network partitions by allowing the database to continue operating even if there are temporary network issuses.
// replica set
    A replica set in MongoDB is a group of mongod processes that maintain the same data set. 

    original data is present in primary node. there are many secondary node is there if the primary node is damage means at that side election will happens which is conducted by Heartbeat node.

// # oplog 

    The oplog (operations log) is a special capped collection that keeps a rolling record of all operations that modify the data stored in your databases.
    (or)
    oplog is a mechanisam if the primary node is creashed so heartbeat node select the secondary as primary so the process is oplog (operation log)

// # how to improve performance in mongodb

    using createIndex 

// # TTL index
    TTL is time to live
    A TTL (Time-To-Live) index in MongoDB is a special type of index that automatically removes documents from a collection after a specified period of time.

// # Pipeline

    Aggregation pipelines can have one or more "stages".

// # Query operator

    $and, $or, $nor , $not

// # size of one document

    The maximum size of the documents is 16 MB.

// # shard components

    shard key: userId
    shards:
    confing servers:
    Mongos;

// # storage engine in mongodb

    WiredTiger is the default storage engine

// # type coercion

    In MongoDB, type coercion refers to the implicit or explicit conversion of values from one data type to another within queries or operations. 


// # acid properties

    Atomicity   // * all the action in a transactions is treated as a single unite of work.
    concistancy  // * Consistency means that any changes made to a database must adhere to the database’s existing constraints, otherwise the whole transaction will fail.
    Isolation  // *  If two transactions are executed simultaneously, the isolation rule guarantees the end result will be the same as if they were executed one after another.
    durability // * Durability guarantees that as soon as the transaction succeeds, the client can be sure the data has been properly persisted. Even something like hardware failure or a power interruption won’t void the transaction.

// # namespaces

    namespaces means collection name and database name both are same.

// # accumulative operator

    $min, $max, $avg

// # regex

    // * for my understanding
    regex is a sqeuence of the charactor that form the patterm 

// # why BSON is faster
BSON's binary structure encodes type and length information, which allows it to be traversed much more quickly compared to JSON.


// # clustered collection
A clustered collection is a MongoDB collection that stores documents in a sorted order based on the value of the clustered index key. Collections created with a clustered index are called clustered collections. 

// # primary ,secondary key index
The primary index is automatically created in the database when the table is activated.

Generally secondary indexes point to the primary key of the record instead of the ultimate data location

// # schema less database
    As a NoSQL database, MongoDB is considered schemaless because it does not require a rigid, pre-defined schema like a relational database

// # ad-hoc queries

    Ad-hoc queries in MongoDB refer to queries that are not predefined and can be created on-the-fly to meet specific requirements.

// # schema less database;

    Schemaless databases are known as NoSQL databases because data isn't stored in relational tables. Instead, you store data differently, such as key-value pairs, documents, columns, or graph data models. 


// # database restore and backup

    Database backup and restore are critical processes for data protection and recovery in database systems.

// # Why BSON is better than JSON?

    BSON's binary-encoded serialization format encodes type and length information as well, which allows it to be traversed much more quickly compared to JSON. 

// #  insert vs save


    INSERT is used to insert the document to the database. save is working like shallow copy if we use find method and asign the object then if we insert the property and we use save is update the database is automatically.

// # alies

    In MongoDB, aliases can be used in aggregation pipelines to temporarily rename fields or create new fields with different names for the duration of the pipeline.


// # types of indexing

    Single Field index
    Compound Index
    Multikey Index
    Geospatial Index
    Clustered Index
    