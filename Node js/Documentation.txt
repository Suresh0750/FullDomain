
// # cookie

   A cookie is a small piece of data stored on the user's computer by the web browser while browsing a website. Cookies are used to store information about the user's session, preferences, and interactions with the site. 
   cookie size 14 kB

// # Cache

    Caching is a technique used to store copies of files or data in a temporary storage location, or cache, so that they can be accessed more quickly. It improves the performance and efficiency of applications by reducing the need to repeatedly fetch data from the original source.
    cache size 1 MB to 8MB but not sure

// # Dependencies

    Dependencies are the crucial packages required for your application to function in a production environment. 

// # Devdependencies

    Dev dependencies are packages required only for the development phase and not for the application to run in production.

// # http methods

    GET, POST, PUT, PATCH, DELETE

// # parts of request and response

    //* Request

    Requestline, Header, body

    /* Response

    Response line, Header, body

// # res.send vs res.write

    res.write :
        Lower-level method from Node.js http module, requires manual handling of headers and ending the response.
        Suitable for more complex scenarios, such as streaming data or sending multiple chunks of data over time.\
        Does not end the response; you must call res.end to complete the response.

    res.send :
        Higher-level method provided by Express.js, handles headers and ending the response automatically.
        Ideal for simple responses, such as JSON, HTML, or plain text.
        Automatically ends the response.

//  # Middleware 

    In Express.js, middleware functions are functions that have access to the request object (req), the response object (res), and the next middleware function in the applicationâ€™s request-response cycle. Middleware can perform various tasks such as executing code, modifying the request and response objects, ending the request-response cycle, and calling the next middleware function in the stack.

// # Types of middleware

    1) Application middleware
    2) Router middleware
    3) Error handling middleware
    4) Build in middleware
    5) Third-party Middleware

    // * Application Middleware

        Application-level middleware is bound to an instance of the express application and is executed for every incoming request to the application.
    // * Router middleware

        Router-level middleware works similarly to application-level middleware but is bound to an instance of express.Router(). It is useful for organizing middleware and routes into modular, mountable route handlers.


// Cookies vs Cache
    Cookies and cache are both used by web browsers to enhance the browsing experience, but they serve different purposes and function in different ways.
    Cookies are used to store data related to a user's interactions with a website. This data can include login information, user preferences, and other session-related information.
    
    // clear chache
        app.use((req, res, next) => {
            res.set("Cache-Control", "no-store");
            next();
        });
    
        chache :
        Cache is used to store copies of files or data so that future requests for that data can be served faster.

// dependencies and Devdependencies

    Dependencies are the crucial packages required for your application to function in a production environment. At the same time, devDependencies are tools and utilities that aid in the development process but are not needed in production.


// http methods

    GET,POST,PUT,PATCH,DELETE

    // * get method for reading the files
    // * post method for creating the files
    // * put method for updatating the entire document
    // * patch method for update the single filed or small thing inside of the document
    // * delete for delete the filed or data


// # parts of request and response

    // * request 
        Request line ,
        header,
        body
    
    // * response
        status line,
        Header,
        body

// # res.send vs res.write

    // * Both are used to send the data backend to cliend but res.send we in express and res.write we used in native http module (Node js).

    // * res.send automatically call the res.send we don't want to mention that, but in Node js using res.write we should call the res.end for ending the response

    // * res.write we should manually mention the Content-Type, in case of the Express using res.send we don't do mention that


// # middleware, Application-level middleware, router-level middleware

   // * middleware 

       The middleware in node. js is a function that will have all the access for requesting an object, responding to an object, and moving to the next middleware function in the application request-response cycle.

    // * Application-level midddleware 

        There are two types of middleware in Express. js: application-level middleware and router-level middleware. Application-level middleware is used to process requests for the entire application and is registered using the app.use() method.

    // * router-level middleware

        Router-level middleware, on the other hand, is used to process requests for a specific router or set of routes and is registered using the router. use() method.

// # CORS

    CROSS origin resources sharing
    What is Cross-Origin Resource Sharing? Cross-origin resource sharing (CORS) is a mechanism for integrating applications. CORS defines a way for client web applications that are loaded in one domain to interact with resources in a different domain.

    it is used to allow requesed fetch the data from one domain to another domain.


// # http option method

    // we use option method in CORS . Before fectching the data we would give the dummy request is called preflight in this quest we will send to the opetion method.

    this option method is happend automatically . when we fectch the data from one domain to another domain our brower will send to preflight request to another domain in this it mention all datails like why we give that request contant-type evrything.

// # preflight method

    A preflight request is a small request that is sent by the browser before the actual request. It contains information like which HTTP method is used, as well as if any custom HTTP headers are present. The preflight gives the server a chance to examine what the actual request will look like before it's made.

// # allow access Controler

    // * we set some information in header for which kind of came requesed for that request which kindof responced we will send.
    Which request it wil send the responce according to the headers details . if the request success means it will send 200 fail means it will send 404.

// # same origin policy.

    Same origin policy is a security mechanism that restricts a resource that is loaded in one particular origin from another origin. This means that an origin cannot access the content from some other origin. This also prevents any kind of suspicious activities that are happening indirectly through a particular origin.

// # CSRF

    Cross-Site Request Forgery (CSRF, or Session Riding) is an attack that forces an end user to execute unwanted actions on a web application in which they're currently authenticated.

// # REST API 

    Representational State Transfer Application Programming Interface. 
    REST APIs facilitate easy, adaptable integrations; RESTful APIs provide scalable solutions for complex business data systems.

    it will send the response video ,audio,file ,html format according to that request.

// # modules

     These modules form part of the building blocks of the application. They help developers work faster and write more structured code.

// # buildin modules 

    Node.js comes with several built-in modules that provide essential functionality for building applications

    example : http,path,os,fs,url,queryString

// # fs module

    The fs (File System) module in Node.js provides functions to interact with the file system, including reading, writing, updating, and deleting files.

// # fs.stat

    The fs.stat method in Node.js is used to retrieve the status of a file or directory. It returns an instance of fs.Stats, which contains various properties and methods that provide detailed information about the file or directory.

// #  req.query
    req.query is used to capture query parameters from the URL. Query parameters are typically used to filter or sort data and are appended to the URL after a question mark (?).

// # req.params

    req.params: Used to capture values from named segments in the route URL.

// # Concurrency

    Concurrency in Node.js refers to the ability to handle multiple operations at the same time. Node.js is built on the V8 JavaScript engine and uses an event-driven, non-blocking I/O model, which makes it efficient and suitable for handling concurrent operations.

// # event driven architecture

    An event-driven architecture (EDA) is an integration model built to publish, capture, process, and respond to events across distributed systems in real time. When an event occurs in one application, a message is automatically sent to all the other applications that need to know about it, so they can act on it in turn.

// # Advantages of Node js

    scalable web app development .
    Hight performance
    Powerful Data Processing
    Easy to Learn and Quick to Adapt
    Lesser Loading Time.

// # app local

    store local variable
     
     hold the data and shold be  accessable an all template middleware


// # events - emit, on

    In Node.js, the events module provides the EventEmitter class, which is a key part of the event-driven architecture. The EventEmitter allows objects to communicate asynchronously by emitting events and listening for those events. This pattern is particularly useful for handling I/O operations, user interactions, and other asynchronous tasks.
    

// # Node js Advantages

    asynchronous and Event driven
    High performance
    single Programming language
    non-blocking I/O
    cross origin
    realtime applicatio
    Rapid developement
    Json support

// # setImmediate 

    setImmediate() is a function in Node.js that schedules a callback to be executed immediately after the current event loop phase completes.

// # Event loop


The event loop is a core concept in Node.js that enables non-blocking, asynchronous programming. It allows Node.js to perform I/O operations, such as reading files and making network requests, without blocking the main execution thread. 

Timers: Executes callbacks scheduled by setTimeout and setInterval.
Pending Callbacks: Executes I/O callbacks deferred to the next iteration of the event loop.
Idle, Prepare: Used internally by Node.js. Not typically relevant for user code.
Poll: Retrieves new I/O events; executes I/O-related callbacks (excluding timers and setImmediate).
Check: Executes callbacks scheduled by setImmediate.
Close Callbacks: Executes callbacks related to closing events, such as socket.on('close', ...).


// * small Indro of  Event queue, Macro-task queue, Micro-task, Event loop phases

    Event Queue: Manages the execution of callbacks and tasks after asynchronous operations complete.
    Macro-task Queue: Handles tasks such as setTimeout, setInterval, and I/O operations.
    Micro-task Queue: Handles tasks such as resolved Promises and process.nextTick() callbacks.
    Event Loop Phases: The event loop processes different types of queues in phases, including timers, pending callbacks, poll, check, and close callbacks.


// # process.nextTick()
    process.nextTick() is a method in Node.js that allows you to schedule a callback function to be invoked in the next iteration of the event loop, before any I/O or timer events.

// # timer functions

    setTimeout
    setInterval

// # stream& buffer & chunk

    // * read the data and write the data is called stream.

    ex : file handling . when user upload any file or image or large amount of data it will came partial partial that means data split format .

    // * the partial data come and store memory chunk  this data is showing the buffer format . so the data will store into the buffor memory.

// # eventqueue

    Event Queue: The event queue holds various types of events, such as callbacks, timers, and I/O events, that are generated as a result of asynchronous operations.

// # pipe 

    // pipe used to do same time readable stream and writalbe stream.


// # morgan

    morgan log module it would use our developement phase. using morgan module we can chack our request is came to server or not.

// # helmet

    helmet is a third-party module in Node.js designed to help secure Express applications by setting various HTTP headers.

// # express.json
 
    express.json is used in the middleware for parsing the data to json format. if we not express.josn we should get the data req.on('data'(chunk)=>{}),req.end(()=>{})

    express.urlendcode is using for convert the data decode format to encode format.

// # app.use()

    The app.use() method is used to mount middleware functions at the specified path. Middleware functions are functions that have access to the request object (req), the response object (res), and the next middleware function in the applicationâ€™s request-response cycle

// # app.set()

    The app.set() method is used to set application-level settings, which are essentially key-value pairs. These settings can be used to configure various aspects of the Express application.

// # writehead vs setHead

    writeHead we should mention  content-type and status but  setHead we don't want to mention that.
    using the writeHead we should call the res.end() for end the request but setHead we don't mention that.

// # cluster

    Clustering in Node.js is a technique used to take advantage of multi-core systems by creating child processes (workers) that share the same server port. The cluster module allows you to create a simple way to scale your application across multiple CPU cores.


// # npm 

    npm is node packages manager
    it is used to manage all packages and dependencies.

// # npm init & package.json()
    npm init is a command used to create a new package.json file for your project. The package.json file holds metadata about the project and its dependencies, scripts, and other configurations.

// # package-lock.json

    it's contains about subpackage details.

// # npx
    npx is a tool for executing packages directly from the npm registry, useful for running one-off commands and avoiding global installs.

// # npm vs yarn

    both are used to manage our package compare to npm yarn is robust security performance.

// # Scaffolding
    Scaffolding in Node.js refers to the process of generating the basic structure or boilerplate code for an application or a part of an application. \

// # MVC

    model view controller which the patter for arranging our project files. it allow to give readable things.

// # interperter vs compiler
    An interpreter translates high-level programming code into machine code line-by-line and executes it immediately. It does not generate an intermediate machine code file.

// # util
    The util module in Node.js provides various utility functions that are helpful for developers. These utilities include functions for formatting strings, inspecting objects, inheriting from classes, and more. The util module is part of the Node.js standard library and can be imported and used without installing any additional packages .


// zlib

    The zlib module in Node.js provides compression and decompression functionality using the Gzip and Deflate/Inflate algorithms.

// # REPL

    Node. js REPL (Read-Eval-Print Loop) is an interactive shell that allows you to run JavaScript code directly in a Node. js environment. 
    
// # alternative for express

    nest js

// # error first callback

    it's used to catch the error which use if fs.read and write .


// # server commmunication

    sever communication is server commutnicate to the another server for accessing data from one server to another server.

// # secure flage

    The Secure attribute is meant to protect against man-in-the-middle (MITM) attacks.

// # libuv

    Libuv provides non-blocking I/O operations, allowing Node. js to handle multiple tasks concurrently without waiting for an operation to complete.


// # exit codes in node js

    In computing, the exit status, or exit code, of a terminated process is an integer number that is made available to its parent process (or caller). In DOS, this may be referred to as an errorlevel.