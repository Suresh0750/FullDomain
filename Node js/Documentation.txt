
// # cookie

   A cookie is a small piece of data stored on the user's computer by the web browser while browsing a website. Cookies are used to store information about the user's session, preferences, and interactions with the site. 
   cookie size 14 kB

// # Cache

    Caching is a technique used to store copies of files or data in a temporary storage location, or cache, so that they can be accessed more quickly. It improves the performance and efficiency of applications by reducing the need to repeatedly fetch data from the original source.
    cache size 1 MB to 8MB but not sure

// # Dependencies

    Dependencies are the crucial packages required for your application to function in a production environment. 

// # Devdependencies

    Dev dependencies are packages required only for the development phase and not for the application to run in production.

// # http methods

    GET, POST, PUT, PATCH, DELETE

// # parts of request and response

    //* Request

    Requestline, Header, body

    /* Response

    Response line, Header, body

// # res.send vs res.write

    res.write :
        Lower-level method from Node.js http module, requires manual handling of headers and ending the response.
        Suitable for more complex scenarios, such as streaming data or sending multiple chunks of data over time.\
        Does not end the response; you must call res.end to complete the response.

    res.send :
        Higher-level method provided by Express.js, handles headers and ending the response automatically.
        Ideal for simple responses, such as JSON, HTML, or plain text.
        Automatically ends the response.

//  # Middleware 

    In Express.js, middleware functions are functions that have access to the request object (req), the response object (res), and the next middleware function in the applicationâ€™s request-response cycle. Middleware can perform various tasks such as executing code, modifying the request and response objects, ending the request-response cycle, and calling the next middleware function in the stack.

// # Types of middleware

    1) Application middleware
    2) Router middleware
    3) Error handling middleware
    4) Build in middleware
    5) Third-party Middleware

    // * Application Middleware

        Application-level middleware is bound to an instance of the express application and is executed for every incoming request to the application.
    // * Router middleware

        Router-level middleware works similarly to application-level middleware but is bound to an instance of express.Router(). It is useful for organizing middleware and routes into modular, mountable route handlers.
